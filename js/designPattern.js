// JavaScript中常见的设计模式:

// 一、单例模式:
// 定义：保证一个类仅有一个实例，并提供一个访问它的全局访问点。例如：线程池、全局缓存、window对象等。

// 二、策略模式
// 定义：定义一系列的算法，把它们一个个封装起来，并且使它们可以相互替换。
// 核心逻辑：将算法的使用与算法的实现分离开来。

// 三、代理模式
// 定义：为一个对象提供一个代用品或占位符，以便控制对它的访问（如 保护代理、虚拟代理、缓存代理、防火墙代理、远程代理、写时复制代理等）。

// 四、迭代器模式
// 定义：提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。

// 五、发布-订阅模式（观察者模式）
// 定义：定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知。

// 六、命令模式

// 七、组合模式

// 八、模板方法模式

// 九、享元模式

// 十、职责链模式

// 十一、中介者模式

// 十二、装饰者模式

// 十三、状态模式

// 十四、适配器模式

// 设计原则:
// 1. 单一职责原则（SRP）: 一个对象或方法只做一件事情。
// 2. 最少知识原则（LKP）: 一个软件实体应当尽可能少地与其他实体发生相互作用，应当尽量减少对象之间的交互。
// 3. 开放-封闭原则（OCP）: 软件实体（类、模块、函数）等应该是可以扩展的，但是不可修改。

// 学习设计模式，有助于写出可复用和可维护性高的程序。